{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "CodeS3Bucket": {
      "Type": "String"
    },
    "CodeS3Key": {
      "Type": "String"
    },
    "AuthLambdaArn": {
      "Type": "String"
    },
    "AlertTopicArn": {
      "Type": "String"
    }
  },
  "Resources": {
    "LambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": ["lambda.amazonaws.com"]
            },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "ManagedPolicyArns": ["arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"],
        "Policies": [{
          "PolicyName": "logs",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": [
                "logs:*"
              ],
              "Resource": "arn:aws:logs:*:*:*"
            }]
          }
        }, {
          "PolicyName": "dynamodb",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Sid": "1",
              "Effect": "Allow",
              "Action": [
                "dynamodb:PutItem",
                "dynamodb:GetItem"
              ],
              "Resource": [
                {"Fn::Join" : ["", ["arn:aws:dynamodb:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":table/location"]]}
              ]
            }]
          }
        }]
      }
    },
    "Lambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {"Ref": "CodeS3Bucket"},
          "S3Key": {"Ref": "CodeS3Key"}
        },
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": {"Fn::GetAtt": ["LambdaRole", "Arn"]},
        "Runtime": "nodejs4.3",
        "Timeout": 60
      }
    },
    "LambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {"Fn::GetAtt": ["Lambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {"Fn::Join": ["", ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "RestApi"}, "/*"]]}
      }
    },
    "LambdaLogMonitoring": {
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "LogGroupName": {"Fn::Join": ["", ["/aws/lambda/", {"Ref": "Lambda"}]]},
        "FilterPattern": "Unhandled",
        "MetricTransformations": [{
          "MetricValue": "1",
          "MetricName": "UnhandledErrorCount",
          "MetricNamespace": "location-service"
        }]
      }
    },
    "LambdaLogMonitoringAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmActions": [{"Ref": "AlertTopicArn"}],
        "OKActions": [{"Ref": "AlertTopicArn"}],
        "MetricName": "UnhandledErrorCount",
        "Namespace": "location-service",
        "Statistic": "Sum",
        "Period": 60,
        "EvaluationPeriods": 1,
        "Threshold": 1,
        "ComparisonOperator": "GreaterThanOrEqualToThreshold"
      }
    },
    "LocationTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [{
          "AttributeName": "id",
          "AttributeType": "S"
        }],
        "KeySchema": [{
          "AttributeName": "id",
          "KeyType": "HASH"
        }],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        },
        "TableName": "location"
      }
    },
    "LocationTableReadThrottleEventsAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "Namespace": "AWS/DynamoDB",
        "MetricName": "ReadThrottleEvents",
        "Dimensions": [{
          "Name": "TableName",
          "Value": {"Ref": "LocationTable"}
        }],
        "Statistic": "Sum",
        "Period": "60",
        "EvaluationPeriods": "1",
        "Threshold": "1",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "AlarmActions": [{"Ref": "AlertTopicArn"}],
        "OKActions": [{"Ref": "AlertTopicArn"}]
      }
    },
    "LocationTableWriteThrottleEventsAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "Namespace": "AWS/DynamoDB",
        "MetricName": "WriteThrottleEvents",
        "Dimensions": [{
          "Name": "TableName",
          "Value": {"Ref": "LocationTable"}
        }],
        "Statistic": "Sum",
        "Period": "60",
        "EvaluationPeriods": "1",
        "Threshold": "1",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "AlarmActions": [{"Ref": "AlertTopicArn"}],
        "OKActions": [{"Ref": "AlertTopicArn"}]
      }
    },
    
    "RestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "location-service-api"
      }
    },
    "RestApiStage": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {"Ref": "RestApiDeployment"},
        "MethodSettings": [{
          "DataTraceEnabled": true,
          "HttpMethod": "*",
          "LoggingLevel": "INFO",
          "ResourcePath": "/*"
        }],
        "RestApiId": {"Ref": "RestApi"},
        "StageName": "v1"
      }
    },
    "RestApiDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {"Ref": "RestApi"},
        "StageName": "cfn"
      },
      "DependsOn": ["LocationPut"]
    },
    "RestApiAuthorizerRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": ["apigateway.amazonaws.com"]
            },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Policies": [{
          "PolicyName": "lambda",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": "lambda:invokeFunction",
              "Resource": {"Ref": "AuthLambdaArn"}
            }]
          }
        }]
      }
    },
    "RestApiAuthorizer": {
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "AuthorizerCredentials": {"Fn::GetAtt": ["RestApiAuthorizerRole", "Arn"]},
        "AuthorizerResultTtlInSeconds": 300,
        "AuthorizerUri": {"Fn::Join" : ["", ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Ref": "AuthLambdaArn"}, "/invocations"]]},
        "IdentitySource": "method.request.header.Authorization",
        "IdentityValidationExpression": "^[a-zA-Z0-9]{3,32}$",
        "Name": "location-service-api-authorizer",
        "RestApiId": {"Ref": "RestApi"},
        "Type": "TOKEN"
      }
    },
    "RestApi5XXErrorsAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmActions": [{"Ref": "AlertTopicArn"}],
        "OKActions": [{"Ref": "AlertTopicArn"}],
        "MetricName": "5XXError",
        "Namespace": "ApiGateway",
        "Statistic": "Sum",
        "Period": 60,
        "EvaluationPeriods": 1,
        "Threshold": 1,
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "Dimensions": [{
          "Name": "ApiName",
          "Value": "location-service-api"
        }]
      }
    },

    "LocationModel": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "ContentType": "application/json",
        "Name": "Profile",
        "RestApiId": {"Ref": "RestApi"},
        "Schema": {"Fn::Join": ["", [
          "{\n",
          "  \"type\": \"object\",\n",
          "  \"additionalProperties\": false,\n",
          "  \"properties\": {\n",
          "    \"latitude\": {\n",
          "      \"type\": \"number\"\n",
          "    },\n",
          "    \"longitude\": {\n",
          "      \"type\": \"number\"\n",
          "    }\n",
          "  },\n",
          "  \"required\": [\"latitude\", \"longitude\"]\n",
          "}\n"
        ]]}
      }
    },

    "LocationsResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {"Ref": "RestApi"},
        "ParentId": {"Fn::GetAtt": ["RestApi", "RootResourceId"]},
        "PathPart": "location"
      }
    },
    "LocationResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {"Ref": "RestApi"},
        "ParentId": {"Ref": "LocationsResource"},
        "PathPart": "{id}"
      }
    },

    "LocationPut": {
      "Type": "AWS::ApiGateway::Method",
      "DependsOn": "LambdaPermission",
      "Properties": {
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {"Ref": "RestApiAuthorizer"},
        "HttpMethod": "PUT",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {"Fn::Join" : ["", ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["Lambda", "Arn"]}, "/invocations"]]},
          "IntegrationResponses": [{
            "StatusCode": 204
          }],
          "RequestTemplates": {
            "application/json": "{\"action\": \"put\", \"id\": \"$input.params('id')\", \"body\": $input.json('$')}"
          }
        },
        "RequestModels": {
          "application/json": {"Ref": "LocationModel"}
        },
        "RequestParameters": {
          "method.request.path.id": true,
          "method.request.header.Authorization": true
        },
        "ResourceId": {"Ref": "LocationResource"},
        "RestApiId": {"Ref": "RestApi"},
        "MethodResponses": [{
          "ResponseModels": {
            "application/json": "Empty"
          },
          "StatusCode": 204
        }]
      }
    }
  },
  "Outputs": {
    "LocationLambdaArn": {
      "Value": {"Fn::GetAtt": ["Lambda", "Arn"]}
    }
  }
}
